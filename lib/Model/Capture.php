<?php
/**
 * Capture
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Klarna Order Managment API
 *
 * API to handle order lifecycle
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Capture Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Capture implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Capture';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'capture_id' => 'string',
        'reference' => 'string',
        'klarna_reference' => 'string',
        'captured_amount' => 'int',
        'captured_at' => '\DateTime',
        'description' => 'string',
        'order_lines' => '\Swagger\Client\Model\OrderLine[]',
        'refunded_amount' => 'int',
        'billing_address' => '\Swagger\Client\Model\Address',
        'shipping_address' => '\Swagger\Client\Model\Address',
        'shipping_info' => '\Swagger\Client\Model\ShippingInfo[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'capture_id' => null,
        'reference' => null,
        'klarna_reference' => null,
        'captured_amount' => 'int64',
        'captured_at' => 'date-time',
        'description' => null,
        'order_lines' => null,
        'refunded_amount' => 'int64',
        'billing_address' => null,
        'shipping_address' => null,
        'shipping_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'capture_id' => 'capture_id',
        'reference' => 'reference',
        'klarna_reference' => 'klarna_reference',
        'captured_amount' => 'captured_amount',
        'captured_at' => 'captured_at',
        'description' => 'description',
        'order_lines' => 'order_lines',
        'refunded_amount' => 'refunded_amount',
        'billing_address' => 'billing_address',
        'shipping_address' => 'shipping_address',
        'shipping_info' => 'shipping_info'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'capture_id' => 'setCaptureId',
        'reference' => 'setReference',
        'klarna_reference' => 'setKlarnaReference',
        'captured_amount' => 'setCapturedAmount',
        'captured_at' => 'setCapturedAt',
        'description' => 'setDescription',
        'order_lines' => 'setOrderLines',
        'refunded_amount' => 'setRefundedAmount',
        'billing_address' => 'setBillingAddress',
        'shipping_address' => 'setShippingAddress',
        'shipping_info' => 'setShippingInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'capture_id' => 'getCaptureId',
        'reference' => 'getReference',
        'klarna_reference' => 'getKlarnaReference',
        'captured_amount' => 'getCapturedAmount',
        'captured_at' => 'getCapturedAt',
        'description' => 'getDescription',
        'order_lines' => 'getOrderLines',
        'refunded_amount' => 'getRefundedAmount',
        'billing_address' => 'getBillingAddress',
        'shipping_address' => 'getShippingAddress',
        'shipping_info' => 'getShippingInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['capture_id'] = isset($data['capture_id']) ? $data['capture_id'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['klarna_reference'] = isset($data['klarna_reference']) ? $data['klarna_reference'] : null;
        $this->container['captured_amount'] = isset($data['captured_amount']) ? $data['captured_amount'] : null;
        $this->container['captured_at'] = isset($data['captured_at']) ? $data['captured_at'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['order_lines'] = isset($data['order_lines']) ? $data['order_lines'] : null;
        $this->container['refunded_amount'] = isset($data['refunded_amount']) ? $data['refunded_amount'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['shipping_address'] = isset($data['shipping_address']) ? $data['shipping_address'] : null;
        $this->container['shipping_info'] = isset($data['shipping_info']) ? $data['shipping_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) > 255)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['captured_amount']) && ($this->container['captured_amount'] < 1)) {
            $invalidProperties[] = "invalid value for 'captured_amount', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets capture_id
     *
     * @return string
     */
    public function getCaptureId()
    {
        return $this->container['capture_id'];
    }

    /**
     * Sets capture_id
     *
     * @param string $capture_id The capture id. Generated when the capture is created.
     *
     * @return $this
     */
    public function setCaptureId($capture_id)
    {
        $this->container['capture_id'] = $capture_id;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Internal reference to the capture which will be included in the settlement files. Max length is 255 characters.
     *
     * @return $this
     */
    public function setReference($reference)
    {
        if (!is_null($reference) && (mb_strlen($reference) > 255)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling Capture., must be smaller than or equal to 255.');
        }
        if (!is_null($reference) && (mb_strlen($reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling Capture., must be bigger than or equal to 0.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets klarna_reference
     *
     * @return string
     */
    public function getKlarnaReference()
    {
        return $this->container['klarna_reference'];
    }

    /**
     * Sets klarna_reference
     *
     * @param string $klarna_reference Customer friendly reference id, used as a reference when communicating with the customer.
     *
     * @return $this
     */
    public function setKlarnaReference($klarna_reference)
    {
        $this->container['klarna_reference'] = $klarna_reference;

        return $this;
    }

    /**
     * Gets captured_amount
     *
     * @return int
     */
    public function getCapturedAmount()
    {
        return $this->container['captured_amount'];
    }

    /**
     * Sets captured_amount
     *
     * @param int $captured_amount The captured amount in minor units.
     *
     * @return $this
     */
    public function setCapturedAmount($captured_amount)
    {

        if (!is_null($captured_amount) && ($captured_amount < 1)) {
            throw new \InvalidArgumentException('invalid value for $captured_amount when calling Capture., must be bigger than or equal to 1.');
        }

        $this->container['captured_amount'] = $captured_amount;

        return $this;
    }

    /**
     * Gets captured_at
     *
     * @return \DateTime
     */
    public function getCapturedAt()
    {
        return $this->container['captured_at'];
    }

    /**
     * Sets captured_at
     *
     * @param \DateTime $captured_at The time of the capture. Specified in ISO 8601.
     *
     * @return $this
     */
    public function setCapturedAt($captured_at)
    {
        $this->container['captured_at'] = $captured_at;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the capture shown to the customer.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets order_lines
     *
     * @return \Swagger\Client\Model\OrderLine[]
     */
    public function getOrderLines()
    {
        return $this->container['order_lines'];
    }

    /**
     * Sets order_lines
     *
     * @param \Swagger\Client\Model\OrderLine[] $order_lines List of order lines for the capture shown to the customer.
     *
     * @return $this
     */
    public function setOrderLines($order_lines)
    {
        $this->container['order_lines'] = $order_lines;

        return $this;
    }

    /**
     * Gets refunded_amount
     *
     * @return int
     */
    public function getRefundedAmount()
    {
        return $this->container['refunded_amount'];
    }

    /**
     * Sets refunded_amount
     *
     * @param int $refunded_amount Refunded amount for this capture in minor units.
     *
     * @return $this
     */
    public function setRefundedAmount($refunded_amount)
    {
        $this->container['refunded_amount'] = $refunded_amount;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \Swagger\Client\Model\Address $billing_address Billing address for the capture.
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param \Swagger\Client\Model\Address $shipping_address Shipping address for the capture
     *
     * @return $this
     */
    public function setShippingAddress($shipping_address)
    {
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets shipping_info
     *
     * @return \Swagger\Client\Model\ShippingInfo[]
     */
    public function getShippingInfo()
    {
        return $this->container['shipping_info'];
    }

    /**
     * Sets shipping_info
     *
     * @param \Swagger\Client\Model\ShippingInfo[] $shipping_info Shipping information for this capture.
     *
     * @return $this
     */
    public function setShippingInfo($shipping_info)
    {
        $this->container['shipping_info'] = $shipping_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


